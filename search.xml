<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Morris算法进行二叉树遍历</title>
    <url>/2020/09/24/Morris%E7%AE%97%E6%B3%95%E8%BF%9B%E8%A1%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>二叉树作为计算机中的一个重要的数据结构，在很多领域都会涉及到，而提到二叉树，我们首先想到的就是其3种遍历方式–前序、中序和后序，对于这三种遍历方式，我们很容易通过使用递归或者迭代（<a href="http://blog.csdn.net/yangfeisc/article/details/44497429%EF%BC%89%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BAO(N)%E3%80%82%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E9%83%BD%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%A0%86%E6%A0%88%E8%BF%9B%E8%A1%8C%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%E7%9A%84%E5%AD%98%E5%82%A8%EF%BC%8C%E5%8D%B3%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B9%9F%E6%98%AFO(N)%E3%80%82">http://blog.csdn.net/yangfeisc/article/details/44497429）的方式实现，时间复杂度为O(N)。但是这两种实现方式都需要使用堆栈进行节点信息的存储，即空间复杂度也是O(N)。</a></p>
<a id="more"></a>

<p>但是还有一种更为巧妙的遍历方法，Morris算法，该算法的时间复杂度也是O(N)，但是空间复杂度却能达到最优的O(1)</p>
<p>树的节点定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol>
<li>当前节点不为空的前提下，将当前节点设置为：cur_node<ol>
<li>cur_node的左节点left_node存在，找到cur_node节点的左子树的最右叶子节点right_node。</li>
<li>最右叶子节点right_node的右节点为空的情况下，right_node的右节点指向cur_node，当前节点指向左节点。</li>
<li>cur_node的左节点left_node不存在，当前cur_node指向当前节点的右节点。</li>
<li>如果当前节点cur_node存在左节点，并且左节点的右节点是当前节点cur_node，将当前节点的右节点置为None，当前节点指向右节点。</li>
</ol>
</li>
</ol>
<p>具体实现方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span>(<span class="params">self, root:TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur.left:</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cur.left</span><br><span class="line">                <span class="keyword">while</span> temp.right <span class="keyword">and</span> <span class="keyword">not</span> temp.right == cur:</span><br><span class="line">                    temp = temp.right</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> temp.right:</span><br><span class="line">                    temp.right = cur</span><br><span class="line">                    cur = cur.left</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append(cur.val)</span><br><span class="line">                    temp.right = <span class="literal">None</span></span><br><span class="line">                    cur = cur.right</span><br><span class="line">      	<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>每日一题</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;每日一题&lt;/font&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>Github项目与Gitee同步更新</title>
    <url>/2020/09/08/Github%E9%A1%B9%E7%9B%AE%E5%92%8CGitee%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用hexo作为个人博客，将个人博客部署到Github或者Gitee中，并开启Pages功能，这样便可以让别人看到自己的个人博客。将博客部署到Github后，每次提交增加新的页面，Github中Pages会自动更新，但是Gitee在每次提交项目后，需要手动更新Pages。同样国内访问Github的速度的确有些慢，Gitee访问速度快，但是每次更新均需要手动更新Pages，这个有点。。。。，本文介绍一种解决办法，用GitHub Actions把代码同步到Gitee</p>
<a id="more"></a>

<h3 id="具体操作方法"><a href="#具体操作方法" class="headerlink" title="具体操作方法"></a>具体操作方法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name: Sync</span><br><span class="line"></span><br><span class="line">on: [ psuh ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">    build:</span><br><span class="line">        runs-on: ubuntu-latest</span><br><span class="line">        steps:</span><br><span class="line">        - name: Sync to Gitee</span><br><span class="line">            uses: wearerequired/git-mirror-action@master # 这个地方不需要修改</span><br><span class="line">            env:</span><br><span class="line">                # 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span><br><span class="line">                SSH_PRIVATE_KEY: $&#123;&#123; secrets.GITEE_RSA_PRIVATE_KEY &#125;&#125;</span><br><span class="line">            with:</span><br><span class="line">                # 注意替换为你的 GitHub 源仓库地址</span><br><span class="line">                source-repo: &quot;git@github.com:XXGGG/xxggg.github.io.git&quot;</span><br><span class="line">                # 注意替换为你的 Gitee 目标仓库地址</span><br><span class="line">                destination-repo: &quot;git@gitee.com:XXGGG/XXGGG.git&quot;</span><br><span class="line"></span><br><span class="line">        - name: Build Gitee Pages</span><br><span class="line">            uses: yanglbme/gitee-pages-action@master # 这个地方不需要修改</span><br><span class="line">            with:</span><br><span class="line">                # 注意替换为你的 Gitee 用户名</span><br><span class="line">                gitee-username: XXGGG</span><br><span class="line">                # 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br><span class="line">                gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span><br><span class="line">                # 注意替换为你的 Gitee 仓库</span><br><span class="line">                gitee-repo: XXGGG/XXGGG</span><br></pre></td></tr></table></figure>

<p>这里面最重要的除了简单更换填写你的github跟gitee对应项目地址以外<br>最重要的的就是配置好你GitHub项目里的 <font color='HotPink'>settings<code>-&gt;</code>secrets</font><code> 里的</code><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font><code>和</code><font color='HotPink'>GITEE_PASSWORD</font></p>
<ul>
<li><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font>  是私钥</li>
<li><font color='HotPink'>GITEE_PASSWORD</font> 是你Gitee的账户密码</li>
</ul>
<p><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font>,<font color='HotPink'>GITEE_PASSWORD</font> 这两个关键字需要在Github项目的<font color='HotPink'>Setting-&gt;Secrets</font>中增加两个这样的关键字，并赋值。</p>
<h3 id="如何获得私钥公钥"><a href="#如何获得私钥公钥" class="headerlink" title="如何获得私钥公钥"></a>如何获得私钥公钥</h3><blockquote>
<p>参考文章<br><a href="https://blog.csdn.net/fenghuibian/article/details/73350890">https://blog.csdn.net/fenghuibian/article/details/73350890</a><br><a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p>
</blockquote>
<h3 id="第一步-生成SSH-Key"><a href="#第一步-生成SSH-Key" class="headerlink" title="第一步  生成SSH Key"></a>第一步  生成SSH Key</h3><p>打开GitBash （windows 下载git后自带）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxx@xxxx.com&quot;</span><br><span class="line">//(xxxx@xxxx.com 为你的邮箱)</span><br></pre></td></tr></table></figure>

<p>按照提示完成三次回车，即可生成 ssh key。<br>通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的公钥，找到id_res.pub这个文件.</p>
<h3 id="第二步-将公钥添加到Github和Gitee中"><a href="#第二步-将公钥添加到Github和Gitee中" class="headerlink" title="第二步 将公钥添加到Github和Gitee中"></a>第二步 将公钥添加到Github和Gitee中</h3><p>浏览器登上GitHub然后在<font color='HotPink'>settings<code>-&gt;</code>SSH and GPG keys</font>里添加上公钥（码云gitee同理）</p>
<h3 id="第三步测试是否配置成功"><a href="#第三步测试是否配置成功" class="headerlink" title="第三步测试是否配置成功"></a>第三步测试是否配置成功</h3><p>打开Gitbash。测试Github是否可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>测试Gitee</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>若返回 Hi XXX! You’ve successfully authenticated, but (Gitee.com/GitHub.com) does not provide shell access. 内容，则证明添加成功。</p>
<h3 id="第四步-配置私钥"><a href="#第四步-配置私钥" class="headerlink" title="第四步 配置私钥"></a>第四步 配置私钥</h3><p>在 ~/.ssh目录下有*<strong>id_rsa*** 和*</strong>id_rsa.pub*<strong>两个文件<br>**<em>id_rsa.pub</em></strong>是公钥<br>**<em>id_rsa**</em> 是私钥</p>
<p>查看私钥 然后把私钥添加到GitHub项目里的<font color='HotPink'><code>settings</code>-&gt;<code>secrets</code></font> 里的<font color='HotPink'><code>GITEE_RSA_PRIVATE_KEY</code></font></p>
<blockquote>
<p>注意：全部都要复制，开头和结尾注意勿遗漏</p>
</blockquote>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>提交项目到Github中，可以在Github项目 <font color='HotPink'><code>Actions</code></font>中查看执行结果。</p>
<blockquote>
<p>感谢 <a href="https://blog.csdn.net/qq_42460209/article/details/108041021?utm_source=app">https://blog.csdn.net/qq_42460209/article/details/108041021?utm_source=app</a></p>
</blockquote>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;Github&lt;/font&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 刷题总结</title>
    <url>/2020/09/04/leetcode%20%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="leetcode-刷题总结"><a href="#leetcode-刷题总结" class="headerlink" title="leetcode 刷题总结"></a>leetcode 刷题总结</h2><blockquote>
<p>题目描述<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
</blockquote>
<a id="more"></a>

<p>示例<br>输入:<br>  1<br> /   <br>2     3<br> <br>  5<br>输出: [“1-&gt;2-&gt;5”, “1-&gt;3”]<br>解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</p>
<blockquote>
<p>递归方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">root, path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> root:   <span class="comment"># 当前节点存在</span></span><br><span class="line">                path += str(root.val)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: <span class="comment"># 当前节点是叶子节点</span></span><br><span class="line">                    paths.append(path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path += <span class="string">&#x27;-&gt;&#x27;</span>  <span class="comment">#当前节点不是叶子节点，继续递归遍历</span></span><br><span class="line">                    gen(root.left, path)</span><br><span class="line">                    gen(root.right, path)</span><br><span class="line">       	paths = []</span><br><span class="line">        gen(root, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>

<blockquote>
<p>非递归方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[str]:</span></span><br><span class="line">        paths = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> paths</span><br><span class="line">       	nodedeq = collections.deque([root])</span><br><span class="line">        pathdeq = collections.deque([str(root.val)])</span><br><span class="line">        <span class="keyword">while</span> nodedeq:</span><br><span class="line">            node = nodedeq.popleft()</span><br><span class="line">            path = pathdeq.popleft()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                paths.append(path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    nodedeq.append(node.left)</span><br><span class="line">                    pathdeq.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + str(node.left.val))</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    nodedeq.append(node.right)</span><br><span class="line">                    pathdeq.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + str(node.right.val))</span><br><span class="line">     	<span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>国产OS远程windows</title>
    <url>/2020/09/23/%E5%9B%BD%E4%BA%A7OS%E8%BF%9C%E7%A8%8Bwindows/</url>
    <content><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>目前国产OS，常用的两大版本为：麒麟OS，统信UOS。这两种类型OS均适配了相应的国产CPU，例如龙芯，飞腾。受限于OS目前可支持的软件较少，以及常用的办公系统是windows，此时就存在一个问题就是：如何在国产OS中，远程到windows中。本文介绍一种方式，针对不同的CPU的操作方式，实现国产OS，远程到windows中。</p>
<a id="more"></a>

<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><code>rdesktop</code> 是一个在 Unix/Linux 下访问 Windows 远程桌面的客户端程序。当前，<code>rdesktop</code> 所支持的 Windows 系列版本包括 NT、2000、XP 和 2003。通过使用 <code>rdesktop</code> 所实现的远程桌面协议（RDP），你可以在 Unix/Linux 系统中呈现 Windows 桌面，并进行相应的操作。<code>rdesktop</code>的开源网站：<a href="http://www.rdesktop.org/">http://www.rdesktop.org/</a></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>国产CPU目前主要有龙芯、申威、飞腾、众志、兆芯、海思、展讯等CPU，本文介绍麒麟OS在龙芯，飞腾这两种类型的CPU情况下<code>rdesktop</code>安装。飞腾CPU采用的是ARM架构，此处采用的麒麟OS使用的是Ubuntu16的内核，便可以从Ubuntu软件包下载网站中直接下载相应的包直接安装。具体的操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. 执行：wget http://ports.ubuntu.com/pool/universe/r/rdesktop/rdesktop_1.8.3-1_arm64.deb 下载对应的deb包</span><br><span class="line">2. 安装对应的deb包，dpkg –i rdesktop_1.8.3-1_arm64.deb</span><br><span class="line">3. 无报错，即为安装成功。</span><br></pre></td></tr></table></figure>

<p>如果系统中缺少部分库，可在<a href="https://pkgs.org/">https://pkgs.org/</a> 该网址下查找对应的依赖库。</p>
<p>龙芯CPU采用的mips架构，目前类型CPU使用较少，很多已有的包无法在进行。由于龙芯CPU使用的mips指令集，那么需要使用mips64el的安装包，需要获取rdesktop源码进行编译并安装。同时可能需要安装一些库。libxrender，libxcursor</p>
<p>库的源码获取可以自行百度获取。rdesktop的源码同样可获得，或者通过：<a href="http://ports.ubuntu.com/pool/universe/r/rdesktop/">http://ports.ubuntu.com/pool/universe/r/rdesktop/</a> 该网址进行查找对应的源码。将压缩包拷贝到系统中，解压后，按照如下操作，将rdesktop重新编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd rdesktop-1.9.0/</span><br><span class="line">./configure --disable-credssp --disable-smartcard</span><br><span class="line">make   </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装完毕后，直接执行rdesktop -f IP 即可全屏远程到windows中。退出全屏可同时按ctrl + alt + enter（确保远程设置中的允许被指定用户访问的选项未被勾选）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d: 域</span><br><span class="line">-s: shell命令 (登录运行命令之后就退出)</span><br><span class="line">-c: 工作目录（应该是-s的子命令），-s shell命令的一个参数</span><br><span class="line">-p: password (- to prompt)</span><br><span class="line">-n: 客户端（本地）主机名，默认为本地主机名</span><br><span class="line">-k: 服务器上的键盘布局选择 (en-us, de, sv, etc.)</span><br><span class="line">-g: 桌面分辨率（宽x高）</span><br><span class="line">-i: enables smartcard authentication, password is used as pin</span><br><span class="line">-f: 全屏模式（Ctrl + Alt + Enter 退出全屏模式）</span><br><span class="line">-b: 强制位图刷新（没发现什么用）</span><br><span class="line">-L: 本地编码</span><br><span class="line">-A: 无缝虚拟应用程序到本地</span><br><span class="line">-B: use BackingStore of X-server (if available)</span><br><span class="line">-e: disable encryption (French TS) 禁用加密</span><br><span class="line">-E: disable encryption from client to server 从客户端到服务器，禁用加密。</span><br><span class="line">-m: 不允许拖动（不传递鼠标的拖动事件）</span><br><span class="line">-C: use private colour map</span><br><span class="line">-D: 不显示窗口标题栏（只有远程桌面窗口，没有关闭和最小化按钮）</span><br><span class="line">-K: 窗口切换快捷热键（Alt+Tab）不传递到远程桌面</span><br><span class="line">-S: 标题按钮的大小，个人觉得这个参数很无用，或者我还没弄明白到底什么意思。</span><br><span class="line">-T: 窗口标题</span><br><span class="line">-t: disable use of remote ctrl</span><br><span class="line">-N: 数字键盘同步</span><br><span class="line">-X: 给定另一个窗口的标识，嵌入到另一个窗口</span><br><span class="line">-a: connection colour depth 选择颜色深度</span><br><span class="line">-z: 启用rdp压缩</span><br><span class="line">-x: RDP5 experience (m[odem 28.8], b[roadband], l[an] or hex nr.)</span><br><span class="line">-P: 持久位图缓存</span><br><span class="line">-r: 设备重定向（参数可以重复使用）注：如windows下的mstsc开启串行口、本地磁盘、打印机等</span><br><span class="line">-r comport:COM1=/dev/ttyS0: enable serial redirection of /dev/ttyS0 to COM1 把Linux上的ttyS0映射到远程windows的COM1口</span><br><span class="line">or COM1=/dev/ttyS0,COM2=/dev/ttyS1</span><br><span class="line">-r disk:floppy=/mnt/floppy: enable redirection of /mnt/floppy to &#x27;floppy&#x27; share</span><br><span class="line">-r floppy=/mnt/floppy,cdrom=/mnt/cdrom  把本地的/mnt/floppy文件夹挂载到远程连接的floppy,/mnt/cdrom文件夹挂在到远程桌面的cdrom</span><br><span class="line">-r clientname= 设置本地设备的客户端名称</span><br><span class="line">for redirected disks</span><br><span class="line">-r lptport:LPT1=/dev/lp0: enable parallel redirection of /dev/lp0 to LPT1</span><br><span class="line">or LPT1=/dev/lp0,LPT2=/dev/lp1</span><br><span class="line">-r printer:mydeskjet: enable printer redirection</span><br><span class="line">or mydeskjet=”HP LaserJet IIIP” to enter server driver as well</span><br><span class="line">-r sound：[local[:driver[:device]]|off|remote]: 远程计算机的声音带到本地</span><br><span class="line">available drivers for ‘local’:</span><br><span class="line">alsa: ALSA output driver, default device: default</span><br><span class="line">-r clipboard:[off|PRIMARYCLIPBOARD|CLIPBOARD]: 剪贴板的配置</span><br><span class="line">redirection.</span><br><span class="line">&#x27;PRIMARYCLIPBOARD&#x27; 在本地和远程桌面共享剪贴板</span><br><span class="line">when sending data to server.</span><br><span class="line">‘CLIPBOARD’ looks at only CLIPBOARD.</span><br><span class="line">以下的不是很常用</span><br><span class="line">-r scard[:”Scard Name”=”Alias Name[;Vendor Name]”[,…]]</span><br><span class="line">example: -r scard:”eToken PRO 00 00”=”AKS ifdh 0”</span><br><span class="line">“eToken PRO 00 00” -&gt; Device in Linux/Unix enviroment</span><br><span class="line">“AKS ifdh 0” -&gt; Device shown in Windows enviroment</span><br><span class="line">example: -r scard:”eToken PRO 00 00”=”AKS ifdh 0;AKS”</span><br><span class="line">“eToken PRO 00 00” -&gt; Device in Linux/Unix enviroment</span><br><span class="line">“AKS ifdh 0” -&gt; Device shown in Windows enviroment</span><br><span class="line">“AKS” -&gt; Device vendor name</span><br><span class="line">-0: attach to console 连接到控制台</span><br><span class="line">-4: use RDP version 4 使用RDP 4的版本</span><br><span class="line">-5: use RDP version 5 (default) 默认使用RDP 5的版本</span><br><span class="line">-o: name=value: Adds an additional option to rdesktop.</span><br><span class="line">sc-csp-name Specifies the Crypto Service Provider name which</span><br><span class="line">is used to authenticate the user by smartcard</span><br><span class="line">sc-container-name Specifies the container name, this is usally the username</span><br><span class="line">sc-reader-name Smartcard reader name to use</span><br><span class="line">sc-card-name Specifies the card name of the smartcard to use</span><br></pre></td></tr></table></figure>

<h3 id="常用功能小结及部分参数用法举例"><a href="#常用功能小结及部分参数用法举例" class="headerlink" title="常用功能小结及部分参数用法举例"></a>常用功能小结及部分参数用法举例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-g: 桌面分辨率（宽x高）</span><br><span class="line">-f: 全屏模式（Ctrl + Alt + Enter 退出全屏模式）</span><br><span class="line">-D: 不显示窗口标题栏（只有远程桌面窗口，没有关闭和最小化按钮）</span><br><span class="line">-T: 窗口标题</span><br><span class="line">-r: 设备重定向</span><br><span class="line">-A: 无缝虚拟应用程序到本地</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>国产OS</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;Linux&lt;/font&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>求解子集</title>
    <url>/2020/09/20/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>给定一组<strong>不含重复元素</strong>的整数数组 <em>nums</em>，返回该数组所有可能的子集（幂集）</p>
<p><strong>说明：</strong>解集不能包含重复的子集</p>
<a id="more"></a>

<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>迭代</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span>(<span class="params">self, nums: List[int]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = [[]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            res = res + [[i] + num <span class="keyword">for</span> num <span class="keyword">in</span> res]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>递归（回溯）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span>(<span class="params">self, nums: List[int]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        n = len(nums)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">i, tmp</span>):</span></span><br><span class="line">            res.append(tmp)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                helper(j + <span class="number">1</span>,tmp + [nums[j]] )</span><br><span class="line">        helper(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> res  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>每日一题</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;每日一题&lt;/font&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>Python colletions模块详细介绍</title>
    <url>/2020/09/06/Python-colletions%E6%A8%A1%E5%9D%97%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="一、模块详细介绍"><a href="#一、模块详细介绍" class="headerlink" title="一、模块详细介绍"></a>一、模块详细介绍</h3><blockquote>
<p>collections 包含了一些特殊的容器，针对Python内置的容器，例如：list、dict、set和tuple，提供了另外一种选择</p>
<p>namedtuple：可以创建包含名称的tuple；<br>deque：类似于list的容器，可以快速的在队列头部和尾部添加、删除元素；<br>Counter，dict的子类，计算可hash的对象；<br>OrderedDict，dict的子类，可以记住元素的添加顺序；<br>defaultdict，dict的子类，可以调用提供默认值的函数；</p>
</blockquote>
<a id="more"></a>

<h3 id="二、模块使用"><a href="#二、模块使用" class="headerlink" title="二、模块使用"></a>二、模块使用</h3><ol>
<li><p>Counter</p>
<p> counter可以支持方便，快速的计数。例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cnt = Counter()</span><br><span class="line">wordList = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">    cnt[word] += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> cnt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​    控制台输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>   对可迭代的对象进行计数或者从另一个映射进行初始化</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()<span class="comment">#一个新的，空的counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">&quot;gallahad&quot;</span>)<span class="comment">#从可迭代的字符串初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(&#123;<span class="string">&#x27;red&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;blue&#x27;</span>:<span class="number">2</span>&#125;)<span class="comment">#从映射初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;red&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;blue&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(cats = <span class="number">4</span>,dogs = <span class="number">8</span>)<span class="comment">#从args初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;dogs&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;cats&#x27;</span>: <span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    Counter 对象类似于字典，如果某个项缺失，会返回0，而不是报出KeyError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">&#x27;eggs&#x27;</span>,<span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;bacon&#x27;</span>]<span class="comment">#没有&#x27;bacon&#x27;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;eggs&#x27;</span>]<span class="comment">#有&#x27;eggs&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>​    将一个元素的数目设置为0，并不能把它从counter中删除，使用del可以将这个元素删除；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">&#x27;eggs&#x27;</span>,<span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;bacon&#x27;</span>]<span class="comment">#没有&#x27;bacon&#x27;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;eggs&#x27;</span>]<span class="comment">#有&#x27;eggs&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>​    Counter对象支持以下三个字典不支持的方法，elements(), most_common(), subtract()；<br>​    elements()返回一个迭代器，每个元素重复的次数为它的数目，顺序是任意的顺序，如果一个元素的数目少于1，那么elements()就会忽略它；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">2</span>,b=<span class="number">4</span>,c=<span class="number">0</span>,d=<span class="number">-2</span>,e = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.elements())</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>most_common</em></strong> 返回一个列表，包含counter中n个最大数目的元素，如果忽略n或者为None，most_common()将会返回counter中的所有元素，元素有着相同数目的将会以任意顺序排列；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common(<span class="number">3</span>)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common()</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common(<span class="literal">None</span>)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>subtract()</em></strong>, 从一个可迭代对象中或者另一个映射（或counter）中，元素相减，类似于dict.update()，但是subtracts 数目而不是替换它们，输入和输出都有可能为0或者为负；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; c = Counter(a=<span class="number">4</span>,b=<span class="number">2</span>,c=<span class="number">0</span>,d=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">-3</span>,d=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.subtract(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-6</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>update</em></strong>， 从一个可迭代对象中或者另一个映射（或counter）中所有元素相加，类似于dict.upodate，是数目相加而非替换它们，另外，可迭代对象是一个元素序列，而非(key,value)对构成的序列；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">Counter(&#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.update(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    Counter对象常见的操作，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(c.values())<span class="comment"># 统计所有的数目</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c)<span class="comment"># 列出所有唯一的元素</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(c)<span class="comment"># 转换为set</span></span><br><span class="line">set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(c)<span class="comment"># 转换为常规的dict</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.items()<span class="comment"># 转换为(elem,cnt)对构成的列表</span></span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">-3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.most_common()[:<span class="number">-4</span>:<span class="number">-1</span>]<span class="comment"># 输出n个数目最小元素</span></span><br><span class="line">[(<span class="string">&#x27;c&#x27;</span>, <span class="number">-3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c += Counter()<span class="comment"># 删除数目为0和为负的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(dict(c.items()))<span class="comment"># 从(elem,cnt)对构成的列表转换为counter</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.clear()<span class="comment"># 清空counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter()</span><br></pre></td></tr></table></figure>

<p>​    在Counter对象进行数学操作，得多集合（counter中元素数目大于0）加法和减法操作，是相加或者相减对应元素的数目；交集和并集返回对应数目的最小值和最大值；每个操作均接受暑促是有符号的数目，但是输出并不包含数目为0或者为负的元素；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>,b=<span class="number">1</span>,c=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c+d<span class="comment">#求和</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c-d<span class="comment">#求差</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d<span class="comment">#求交集</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c | d<span class="comment">#求并集</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>deque</p>
<p>deque是栈和队列的一种广义实现，deque是”double-end queue”的简称；deque支持线程安全、有效内存地以近似O(1)的性能在deque的两端插入和删除元素，尽管list也支持相似的操作，但是它主要在固定长度操作上的优化，从而在pop(0)和insert(0,v)（会改变数据的位置和大小）上有O(n)的时间复杂度。</p>
<p>deque支持如下方法，</p>
<blockquote>
<p><strong>append(x)，</strong> 将x添加到deque的右侧；</p>
<p><strong>appendleft(x)，</strong> 将x添加到deque的左侧；</p>
<p><strong>clear()，</strong> 将deque中的元素全部删除，最后长度为0；</p>
<p><strong>count(x)，</strong> 返回deque中元素等于x的个数；</p>
<p><strong>extend(iterable)，</strong> 将可迭代变量iterable中的元素添加至deque的右侧；</p>
<p><strong>extendleft(iterable)，</strong> 将变量iterable中的元素添加至deque的左侧，往左侧添加序列的顺序与可迭代变量iterable中的元素相反；</p>
<p><strong>pop()，</strong> 移除和返回deque中最右侧的元素，如果没有元素，将会报出IndexError；</p>
<p><strong>popleft()，</strong> 移除和返回deque中最左侧的元素，如果没有元素，将会报出IndexError；</p>
<p><strong>remove(value)，</strong> 移除第一次出现的value，如果没有找到，报出ValueError；</p>
<p><strong>reverse()，</strong> 反转deque中的元素，并返回None；</p>
<p><strong>rotate(n)，</strong> 从右侧反转n步，如果n为负数，则从左侧反转，d.rotate(1)等于d.appendleft(d.pop())；</p>
<p><strong>maxlen，</strong> 只读的属性，deque的最大长度，如果无解，就返回None；</p>
</blockquote>
<p>除了以上的方法之外，deque还支持迭代、序列化、len(d)、reversed(d)、copy.copy(d)、copy.deepcopy(d)，通过in操作符进行成员测试和下标索引，索引的时间复杂度是在两端是O(1)，在中间是O(n)，为了快速获取，可以使用list代替</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque(<span class="string">&#x27;ghi&#x27;</span>)<span class="comment"># 新建一个deque，有三个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ele <span class="keyword">in</span> d:<span class="comment"># 遍历deque</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> ele.upper()</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span></span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">I</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">&#x27;j&#x27;</span>)<span class="comment"># deque右侧添加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.appendleft(<span class="string">&#x27;f&#x27;</span>)<span class="comment"># deque左侧添加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d<span class="comment"># 打印deque</span></span><br><span class="line">deque([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()<span class="comment"># 返回和移除最右侧元素</span></span><br><span class="line"><span class="string">&#x27;j&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popleft()<span class="comment"># 返回和移除最左侧元素</span></span><br><span class="line"><span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d)<span class="comment"># 以列表形式展示出deque的内容</span></span><br><span class="line">[<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">0</span>]<span class="comment"># 获取最左侧的元素</span></span><br><span class="line"><span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">-1</span>]<span class="comment"># 获取最右侧的元素</span></span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(d))<span class="comment"># 以列表形式展示出倒序的deque的内容</span></span><br><span class="line">[<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> d<span class="comment"># 在deque中搜索</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extend(<span class="string">&#x27;jkl&#x27;</span>)<span class="comment"># 一次添加多个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">1</span>)<span class="comment"># 往右侧翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">-1</span>)<span class="comment"># 往左侧翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>deque(reversed(d))<span class="comment"># 以逆序新建一个deque</span></span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()<span class="comment"># 清空deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()<span class="comment"># 不能在空的deque上pop</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: pop <span class="keyword">from</span> an empty deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extendleft(<span class="string">&#x27;abc&#x27;</span>)<span class="comment"># 以输入的逆序向左扩展</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p><strong><em>其他的应用</em></strong></p>
<ol>
<li><p>限定长度的deque提供了Unix中tail命令相似的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span>(<span class="params">filename,n = <span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;Return the last n lines of a file&quot;</span></span><br><span class="line">    <span class="keyword">return</span> deque(open(filename),n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tail(<span class="string">&quot;temp.txt&quot;</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用deque维护一个序列（右侧添加元素，左侧删除元素）中窗口的平均值；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span>(<span class="params">iterable,n = <span class="number">3</span></span>):</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    d = deque(itertools.islice(it,n<span class="number">-1</span>))</span><br><span class="line">    <span class="comment"># 第一次只有两个元素，再右移的过程中，需要先删除最左端的元素，因此现在最左端加入0</span></span><br><span class="line">    d.appendleft(<span class="number">0</span>)</span><br><span class="line">    s = sum(d)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> it:</span><br><span class="line">        <span class="comment"># 删除最左端的元素，再加上新元素</span></span><br><span class="line">        s += ele - d.popleft()</span><br><span class="line">        <span class="comment"># 右端添加新元素</span></span><br><span class="line">        d.append(ele)</span><br><span class="line">        <span class="keyword">yield</span> s / float(n)</span><br><span class="line"></span><br><span class="line">array = [<span class="number">40</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">46</span>,<span class="number">39</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> moving_average(array,n=<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">print</span> ele</span><br></pre></td></tr></table></figure>
</li>
<li><p>rotate()方法提供了一种实现deque切片和删除的方式，例如，del d[n]依赖于rotate方法的纯Python实现，如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_nth</span>(<span class="params">d,n</span>):</span></span><br><span class="line">    <span class="comment"># 将前n个元素翻转到右侧</span></span><br><span class="line">    d.rotate(-n)</span><br><span class="line">    <span class="comment"># 删除第n个元素</span></span><br><span class="line">    d.popleft()</span><br><span class="line">    <span class="comment"># 再将后n个元素翻转到左侧</span></span><br><span class="line">    d.rotate(n)</span><br><span class="line"></span><br><span class="line">d = deque(<span class="string">&quot;abcdefg&quot;</span>)</span><br><span class="line">delete_nth(d,n = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice依赖于rotate方法的纯Python实现，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slice</span>(<span class="params">d,m,n</span>):</span></span><br><span class="line">    <span class="comment"># 先将前面m个元素翻转到右侧</span></span><br><span class="line">    d.rotate(-m)</span><br><span class="line">    i = m</span><br><span class="line">    sliceList = []</span><br><span class="line">    <span class="comment"># 依次将[m,n]区间内的元素出栈</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        item = d.popleft()</span><br><span class="line">        sliceList.append(item)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 再将出栈的元素扩展到deque右侧</span></span><br><span class="line">    d.extend(sliceList)</span><br><span class="line">    <span class="comment"># 再将后面n个元素翻转到左侧</span></span><br><span class="line">    d.rotate(n)</span><br><span class="line">    <span class="keyword">return</span> sliceList</span><br><span class="line"></span><br><span class="line">d = deque(<span class="string">&quot;abcdefg&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> slice(d,<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>宪法-1</title>
    <url>/2020/10/12/%E5%AE%AA%E6%B3%95-1/</url>
    <content><![CDATA[<h3 id="宪法的概念"><a href="#宪法的概念" class="headerlink" title="宪法的概念"></a>宪法的概念</h3><ul>
<li>宪法是具有最高法律效力的国家根本法。它规定了国家的根本制度和根本任务，保障了公民基本权利，集中体现了各种政治力量对比关系。</li>
<li>宪法是其他法律的立法基础和立法依据。其他法律是根据宪法制定的，是宪法的具体化。</li>
<li>根本政治制度是：人民代表大会制度</li>
<li>根本制度是：社会主义制度</li>
<li>根本任务是：解放生产力和发展生产力</li>
</ul>
<a id="more"></a>

<h3 id="宪法的宣誓制度"><a href="#宪法的宣誓制度" class="headerlink" title="宪法的宣誓制度"></a>宪法的宣誓制度</h3><p>2015年7月1日第十二届全国人民代表大会常务委员会第十五次会议表决通过实行宪法宣誓制度的决定。2018年2月24日，全国人大常委会对宪法宣誓制度做出修订，新的宣誓词为：我宣誓：忠于中华人民共和国宪法，维护宪法权威，履行法定职责，忠于祖国，忠于人民，恪尽职守，廉洁奉公，接受人民的监督，为建设富强民主文明和谐美丽的社会主义现代化强国努力奋斗。</p>
<ul>
<li>口诀：三个忠于，一个建设</li>
<li>宣誓仪式可以采取单独宣誓或者集体宣誓。</li>
<li>立法机关，司法机关，监察机关均需要进行宣誓</li>
</ul>
<h3 id="新中国宪法的历史"><a href="#新中国宪法的历史" class="headerlink" title="新中国宪法的历史"></a>新中国宪法的历史</h3><ol>
<li>1954年宪法，是社会主义的宪法</li>
<li>1982年宪法是现行宪法，当前5次宪法修正案。</li>
<li>1988年宪法修正案，私有经济的补充，国家引导，监督，管理。土地的使用权转让。</li>
<li>1993年宪法修正案：（1）正处于初级中国特色，改革开放。（2）多党合作，政治协商。（3）国营改国有（4）家庭联产承包责任制。（5）实行社会主义市场经济；集体独立，民主管理。（6）县三改五。</li>
<li>1999年宪法修正案：（1）长期初级。（2）依法治国。（3）发展社会主义经济，按劳分配，多种分配并存。（4）统分结合。（5）个私重要，保合法权益，国家引，监，管。</li>
<li>2004年宪法修正案：（1）沿着特色，三个代表。（2）政治文明。（3）社会主义事业建设者。（4）土地征收需要公共利益需要，并补偿。（5）非公经济保护合法权益，国家鼓励，支持，引导，依法监督。（6）保护合法的私有财权，征收征用并补偿。（7）社保制度。（8）人权：生存权和发展权。（12）乡三改五。（13）增国歌正式将义勇军进行曲作为国歌</li>
</ol>
<ul>
<li>记忆口诀<ul>
<li>1988年：私营土地可转让。</li>
<li>1993年：初级特色市场立，五县联产政协制</li>
<li>1999年：法制邓论分配多，私营统分反革命</li>
<li>2004年：三个代表乡里变，社保人权土地偿。</li>
</ul>
</li>
</ul>
<h5 id="2018年3月11日年第五次宪法修正案"><a href="#2018年3月11日年第五次宪法修正案" class="headerlink" title="2018年3月11日年第五次宪法修正案"></a>2018年3月11日年第五次宪法修正案</h5><ol>
<li>在马列毛邓三科习近平新时代中国特色社会主义思想引导下</li>
<li>和谐美丽现代化强国/伟大复兴</li>
<li>致力于复兴的爱国者</li>
<li>平等团结互助和谐民族关系。</li>
<li>倡导社会主义核心价值观。</li>
<li>宪法和法律委员会</li>
<li>和平发展/互利共赢/命运共同体</li>
<li>共产党领导</li>
<li>增就职要宣誓</li>
<li>删主席和副主席不超两届</li>
<li>设区的市可定地方性法规</li>
<li>增监察委员会</li>
<li>增人大产生监察机关</li>
<li>删国务院/县以上政府监察职能</li>
<li>增人大常委监督监察委职能</li>
<li>增人大选举并罢免监察委主任职能</li>
<li>增人大常委会任免国家监察委副主任/委员职能</li>
<li>增人大常委不得担任监察机关职务</li>
<li>法制变法治</li>
</ol>
]]></content>
      <categories>
        <category>法律</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;宪法&lt;/font&gt;</tag>
      </tags>
  </entry>
  <entry>
    <title>宪法-2</title>
    <url>/2020/10/13/%E5%AE%AA%E6%B3%95-2/</url>
    <content><![CDATA[<h3 id="1、国家制度"><a href="#1、国家制度" class="headerlink" title="1、国家制度"></a>1、国家制度</h3><ol>
<li>国体<ul>
<li>人民民主专政：指中国共产党领导的人民民主政权在人民内部实行民主，对境内外敌对势力和犯罪分子实行专政。境内外敌对势力：民族分裂势力，宗教极端势力。国际恐怖主义势力。</li>
</ul>
</li>
</ol>
<a id="more"></a>

<ol>
<li>政党制度和政协制度<ol>
<li>共产党是执政党，民主党是参政党。中国共产党与各民主党派合作的十六字方针是：长期共存，互相监督，肝胆相照，荣辱与共。</li>
<li>中国政协：中国人民爱国统一战线的组织。中华人民共和国实行的政党制度是：共产党领导的多党合作政协制度。</li>
</ol>
</li>
<li>政体<ol>
<li>人民代表大会制度是中国人民民主专政的政权组织形式，是中国的根本政治制度。</li>
<li>中华人民共和国的一切权力属于人民</li>
<li>全国人大是最高国家权力机关；地方各级人大是地方国家权力机关；人民行使国家权力的机关是全国人大和地方各级人大。</li>
</ol>
</li>
</ol>
<h3 id="2、选举制度的基本原则"><a href="#2、选举制度的基本原则" class="headerlink" title="2、选举制度的基本原则"></a>2、选举制度的基本原则</h3><ol>
<li><p>普遍性选择</p>
<ol>
<li>中国公民</li>
<li>年满18周岁</li>
<li>未被剥夺政治权力</li>
</ol>
</li>
<li><p>平等原则</p>
<ol>
<li>每个选民只能在一个地方有一个投票权</li>
<li>更加着眼于实质上的平等。同票同权。2010年3月选举法修正案修改内容。</li>
</ol>
</li>
<li><p>直接和间接选举并用选择</p>
<ol>
<li>间接选举：全国人民代表大会代表，省，自治区，直辖市，设区的市，自治州的人民代表大会代表，由下一级人民代表选出</li>
<li>直接选举：不设区的市、市辖区、县、自治县、乡、民族乡，镇。选取全体的<strong>过半数</strong>参加投票，选举有效。代表候选人获得参加投票的选民<strong>过半数</strong>的选票时。</li>
</ol>
</li>
<li><p>秘密投票原则</p>
<ol>
<li><p>无记名投票</p>
</li>
<li><p>同意，不同意，弃权，另选他人。</p>
</li>
<li><p>不能亲自书写的可以委托他人代写。</p>
<blockquote>
<p>普遍平等与秘密，公民十八有权力</p>
<p>直选间选县为界，城乡同票一比一</p>
</blockquote>
<ol start="5">
<li>县级以上地方各级人大职权<ol>
<li>选举本级人民代表大会常务委员会的组成人员</li>
<li>选举省长、副省长、自治区主席、副主席、市长、副市长、州长、副州长、县长、副县长、区长、副区长。</li>
<li>选举本级人民法院院长和人民检察院检察长。</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="3、民族区域自治制度"><a href="#3、民族区域自治制度" class="headerlink" title="3、民族区域自治制度"></a>3、民族区域自治制度</h3><ol>
<li>自治机关<ol>
<li>人民代表大会—不包括常委会</li>
<li>政府</li>
</ol>
</li>
</ol>
<blockquote>
<p>自治地方分为：自治区，自治州，自治县</p>
<p>民族乡不是自治地方。自治地方的法院、检查院不是自治机关。</p>
</blockquote>
<h3 id="4、民族特色"><a href="#4、民族特色" class="headerlink" title="4、民族特色"></a>4、民族特色</h3><ol>
<li>自治区主席，自治州州长，自治县县长由实行区域自治的民族的公民担任。</li>
<li>《宪法》第113条第2款规定，自治区，自治州，自治县的人民代表大会常务委员会中应当有实行区域自治的民族的公民担任主任或者副主任。</li>
<li>民族自治地方自治机关的自治权<ol>
<li>民族立法权</li>
<li>变通执法权</li>
<li>财政经济自主权</li>
<li>文化、语言文字自主权</li>
<li>组织公安部队权—需要国务院批准。</li>
<li>少数民族干部具有任用优先权。</li>
</ol>
</li>
</ol>
<h3 id="5、特别行政区制度—无国防权和外交权"><a href="#5、特别行政区制度—无国防权和外交权" class="headerlink" title="5、特别行政区制度—无国防权和外交权"></a>5、特别行政区制度—无国防权和外交权</h3><ol>
<li><p>全国人大</p>
<ol>
<li>决定特别行政区的设立及其制度。</li>
<li>制定并修改特别行政区基本法的专属权。</li>
<li>全国人民代表大会授权香港特别行政区依照本法的规定，实行高度自治，享有行政管理权，立法权，独立的司法权和终审权。</li>
</ol>
</li>
<li><p>全国人大常委会—对最高法的具有法律解释权</p>
<ol>
<li>对基本法的解释权</li>
<li>特区立法的备案审查权（特区立法会制定的法律只须报全国人大常委会备案，常委会认为有问题，可以发回，但不能撤销）；</li>
<li>特区进入紧急状态的决定权</li>
</ol>
<blockquote>
<p>人大设区定制度，制修基法它专属，常委释法加审查。</p>
</blockquote>
</li>
<li><p>国务院</p>
<ol>
<li>负责管理与特区有关的外交事务</li>
<li>管理特区的防务</li>
<li>任命特区行政长官及其他主要行政官员</li>
<li>任命澳门检察院检察长。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>法律</category>
      </categories>
      <tags>
        <tag>&lt;font size=&quot;6&quot;&gt;宪法&lt;/font&gt;</tag>
      </tags>
  </entry>
</search>

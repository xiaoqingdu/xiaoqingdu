<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode 刷题总结</title>
    <url>/2020/09/04/leetcode%20%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="leetcode-刷题总结"><a href="#leetcode-刷题总结" class="headerlink" title="leetcode 刷题总结"></a>leetcode 刷题总结</h2><blockquote>
<p>题目描述<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
</blockquote>
<a id="more"></a>

<p>示例<br>输入:<br>  1<br> /   <br>2     3<br> <br>  5<br>输出: [“1-&gt;2-&gt;5”, “1-&gt;3”]<br>解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</p>
<blockquote>
<p>递归方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gen</span>(<span class="params">root, path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> root:   <span class="comment"># 当前节点存在</span></span><br><span class="line">                path += str(root.val)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: <span class="comment"># 当前节点是叶子节点</span></span><br><span class="line">                    paths.append(path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path += <span class="string">&#x27;-&gt;&#x27;</span>  <span class="comment">#当前节点不是叶子节点，继续递归遍历</span></span><br><span class="line">                    gen(root.left, path)</span><br><span class="line">                    gen(root.right, path)</span><br><span class="line">       	paths = []</span><br><span class="line">        gen(root, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>

<blockquote>
<p>非递归方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[str]:</span></span><br><span class="line">        paths = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> paths</span><br><span class="line">       	nodedeq = collections.deque([root])</span><br><span class="line">        pathdeq = collections.deque([str(root.val)])</span><br><span class="line">        <span class="keyword">while</span> nodedeq:</span><br><span class="line">            node = nodedeq.popleft()</span><br><span class="line">            path = pathdeq.popleft()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                paths.append(path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    nodedeq.append(node.left)</span><br><span class="line">                    pathdeq.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + str(node.left.val))</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    nodedeq.append(node.right)</span><br><span class="line">                    pathdeq.append(path + <span class="string">&#x27;-&gt;&#x27;</span> + str(node.right.val))</span><br><span class="line">     	<span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Python colletions模块详细介绍</title>
    <url>/2020/09/06/Python-colletions%E6%A8%A1%E5%9D%97%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="一、模块详细介绍"><a href="#一、模块详细介绍" class="headerlink" title="一、模块详细介绍"></a>一、模块详细介绍</h3><blockquote>
<p>collections 包含了一些特殊的容器，针对Python内置的容器，例如：list、dict、set和tuple，提供了另外一种选择</p>
<p>namedtuple：可以创建包含名称的tuple；<br>deque：类似于list的容器，可以快速的在队列头部和尾部添加、删除元素；<br>Counter，dict的子类，计算可hash的对象；<br>OrderedDict，dict的子类，可以记住元素的添加顺序；<br>defaultdict，dict的子类，可以调用提供默认值的函数；</p>
</blockquote>
<a id="more"></a>

<h3 id="二、模块使用"><a href="#二、模块使用" class="headerlink" title="二、模块使用"></a>二、模块使用</h3><ol>
<li><p>Counter</p>
<p> counter可以支持方便，快速的计数。例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">cnt = Counter()</span><br><span class="line">wordList = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">    cnt[word] += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> cnt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>​    控制台输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<pre><code>   对可迭代的对象进行计数或者从另一个映射进行初始化</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()<span class="comment">#一个新的，空的counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">&quot;gallahad&quot;</span>)<span class="comment">#从可迭代的字符串初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(&#123;<span class="string">&#x27;red&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;blue&#x27;</span>:<span class="number">2</span>&#125;)<span class="comment">#从映射初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;red&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;blue&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(cats = <span class="number">4</span>,dogs = <span class="number">8</span>)<span class="comment">#从args初始化counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;dogs&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;cats&#x27;</span>: <span class="number">4</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    Counter 对象类似于字典，如果某个项缺失，会返回0，而不是报出KeyError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">&#x27;eggs&#x27;</span>,<span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;bacon&#x27;</span>]<span class="comment">#没有&#x27;bacon&#x27;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;eggs&#x27;</span>]<span class="comment">#有&#x27;eggs&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>​    将一个元素的数目设置为0，并不能把它从counter中删除，使用del可以将这个元素删除；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">&#x27;eggs&#x27;</span>,<span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;bacon&#x27;</span>]<span class="comment">#没有&#x27;bacon&#x27;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">&#x27;eggs&#x27;</span>]<span class="comment">#有&#x27;eggs&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>​    Counter对象支持以下三个字典不支持的方法，elements(), most_common(), subtract()；<br>​    elements()返回一个迭代器，每个元素重复的次数为它的数目，顺序是任意的顺序，如果一个元素的数目少于1，那么elements()就会忽略它；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">2</span>,b=<span class="number">4</span>,c=<span class="number">0</span>,d=<span class="number">-2</span>,e = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.elements())</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>most_common</em></strong> 返回一个列表，包含counter中n个最大数目的元素，如果忽略n或者为None，most_common()将会返回counter中的所有元素，元素有着相同数目的将会以任意顺序排列；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common(<span class="number">3</span>)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common()</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">&#x27;abracadabra&#x27;</span>).most_common(<span class="literal">None</span>)</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>subtract()</em></strong>, 从一个可迭代对象中或者另一个映射（或counter）中，元素相减，类似于dict.update()，但是subtracts 数目而不是替换它们，输入和输出都有可能为0或者为负；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; c = Counter(a=<span class="number">4</span>,b=<span class="number">2</span>,c=<span class="number">0</span>,d=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">-3</span>,d=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.subtract(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-6</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    <strong><em>update</em></strong>， 从一个可迭代对象中或者另一个映射（或counter）中所有元素相加，类似于dict.upodate，是数目相加而非替换它们，另外，可迭代对象是一个元素序列，而非(key,value)对构成的序列；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">-2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">Counter(&#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.update(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>​    Counter对象常见的操作，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(c.values())<span class="comment"># 统计所有的数目</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c)<span class="comment"># 列出所有唯一的元素</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(c)<span class="comment"># 转换为set</span></span><br><span class="line">set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(c)<span class="comment"># 转换为常规的dict</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">-3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.items()<span class="comment"># 转换为(elem,cnt)对构成的列表</span></span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">-3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.most_common()[:<span class="number">-4</span>:<span class="number">-1</span>]<span class="comment"># 输出n个数目最小元素</span></span><br><span class="line">[(<span class="string">&#x27;c&#x27;</span>, <span class="number">-3</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c += Counter()<span class="comment"># 删除数目为0和为负的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(dict(c.items()))<span class="comment"># 从(elem,cnt)对构成的列表转换为counter</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.clear()<span class="comment"># 清空counter</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter()</span><br></pre></td></tr></table></figure>

<p>​    在Counter对象进行数学操作，得多集合（counter中元素数目大于0）加法和减法操作，是相加或者相减对应元素的数目；交集和并集返回对应数目的最小值和最大值；每个操作均接受暑促是有符号的数目，但是输出并不包含数目为0或者为负的元素；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>,b=<span class="number">1</span>,c=<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c+d<span class="comment">#求和</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c-d<span class="comment">#求差</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d<span class="comment">#求交集</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c | d<span class="comment">#求并集</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>deque</p>
<p>deque是栈和队列的一种广义实现，deque是”double-end queue”的简称；deque支持线程安全、有效内存地以近似O(1)的性能在deque的两端插入和删除元素，尽管list也支持相似的操作，但是它主要在固定长度操作上的优化，从而在pop(0)和insert(0,v)（会改变数据的位置和大小）上有O(n)的时间复杂度。</p>
<p>deque支持如下方法，</p>
<blockquote>
<p><strong>append(x)，</strong> 将x添加到deque的右侧；</p>
<p><strong>appendleft(x)，</strong> 将x添加到deque的左侧；</p>
<p><strong>clear()，</strong> 将deque中的元素全部删除，最后长度为0；</p>
<p><strong>count(x)，</strong> 返回deque中元素等于x的个数；</p>
<p><strong>extend(iterable)，</strong> 将可迭代变量iterable中的元素添加至deque的右侧；</p>
<p><strong>extendleft(iterable)，</strong> 将变量iterable中的元素添加至deque的左侧，往左侧添加序列的顺序与可迭代变量iterable中的元素相反；</p>
<p><strong>pop()，</strong> 移除和返回deque中最右侧的元素，如果没有元素，将会报出IndexError；</p>
<p><strong>popleft()，</strong> 移除和返回deque中最左侧的元素，如果没有元素，将会报出IndexError；</p>
<p><strong>remove(value)，</strong> 移除第一次出现的value，如果没有找到，报出ValueError；</p>
<p><strong>reverse()，</strong> 反转deque中的元素，并返回None；</p>
<p><strong>rotate(n)，</strong> 从右侧反转n步，如果n为负数，则从左侧反转，d.rotate(1)等于d.appendleft(d.pop())；</p>
<p><strong>maxlen，</strong> 只读的属性，deque的最大长度，如果无解，就返回None；</p>
</blockquote>
<p>除了以上的方法之外，deque还支持迭代、序列化、len(d)、reversed(d)、copy.copy(d)、copy.deepcopy(d)，通过in操作符进行成员测试和下标索引，索引的时间复杂度是在两端是O(1)，在中间是O(n)，为了快速获取，可以使用list代替</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque(<span class="string">&#x27;ghi&#x27;</span>)<span class="comment"># 新建一个deque，有三个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ele <span class="keyword">in</span> d:<span class="comment"># 遍历deque</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> ele.upper()</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span></span><br><span class="line">G</span><br><span class="line">H</span><br><span class="line">I</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.append(<span class="string">&#x27;j&#x27;</span>)<span class="comment"># deque右侧添加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.appendleft(<span class="string">&#x27;f&#x27;</span>)<span class="comment"># deque左侧添加一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d<span class="comment"># 打印deque</span></span><br><span class="line">deque([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()<span class="comment"># 返回和移除最右侧元素</span></span><br><span class="line"><span class="string">&#x27;j&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popleft()<span class="comment"># 返回和移除最左侧元素</span></span><br><span class="line"><span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d)<span class="comment"># 以列表形式展示出deque的内容</span></span><br><span class="line">[<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">0</span>]<span class="comment"># 获取最左侧的元素</span></span><br><span class="line"><span class="string">&#x27;g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">-1</span>]<span class="comment"># 获取最右侧的元素</span></span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(reversed(d))<span class="comment"># 以列表形式展示出倒序的deque的内容</span></span><br><span class="line">[<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;h&#x27;</span> <span class="keyword">in</span> d<span class="comment"># 在deque中搜索</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extend(<span class="string">&#x27;jkl&#x27;</span>)<span class="comment"># 一次添加多个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">1</span>)<span class="comment"># 往右侧翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">-1</span>)<span class="comment"># 往左侧翻转</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>deque(reversed(d))<span class="comment"># 以逆序新建一个deque</span></span><br><span class="line">deque([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()<span class="comment"># 清空deque</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop()<span class="comment"># 不能在空的deque上pop</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: pop <span class="keyword">from</span> an empty deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.extendleft(<span class="string">&#x27;abc&#x27;</span>)<span class="comment"># 以输入的逆序向左扩展</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">deque([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p><strong><em>其他的应用</em></strong></p>
<ol>
<li><p>限定长度的deque提供了Unix中tail命令相似的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span>(<span class="params">filename,n = <span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;Return the last n lines of a file&quot;</span></span><br><span class="line">    <span class="keyword">return</span> deque(open(filename),n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> tail(<span class="string">&quot;temp.txt&quot;</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用deque维护一个序列（右侧添加元素，左侧删除元素）中窗口的平均值；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span>(<span class="params">iterable,n = <span class="number">3</span></span>):</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    d = deque(itertools.islice(it,n<span class="number">-1</span>))</span><br><span class="line">    <span class="comment"># 第一次只有两个元素，再右移的过程中，需要先删除最左端的元素，因此现在最左端加入0</span></span><br><span class="line">    d.appendleft(<span class="number">0</span>)</span><br><span class="line">    s = sum(d)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> it:</span><br><span class="line">        <span class="comment"># 删除最左端的元素，再加上新元素</span></span><br><span class="line">        s += ele - d.popleft()</span><br><span class="line">        <span class="comment"># 右端添加新元素</span></span><br><span class="line">        d.append(ele)</span><br><span class="line">        <span class="keyword">yield</span> s / float(n)</span><br><span class="line"></span><br><span class="line">array = [<span class="number">40</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">46</span>,<span class="number">39</span>,<span class="number">44</span>]</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> moving_average(array,n=<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">print</span> ele</span><br></pre></td></tr></table></figure>
</li>
<li><p>rotate()方法提供了一种实现deque切片和删除的方式，例如，del d[n]依赖于rotate方法的纯Python实现，如下，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_nth</span>(<span class="params">d,n</span>):</span></span><br><span class="line">    <span class="comment"># 将前n个元素翻转到右侧</span></span><br><span class="line">    d.rotate(-n)</span><br><span class="line">    <span class="comment"># 删除第n个元素</span></span><br><span class="line">    d.popleft()</span><br><span class="line">    <span class="comment"># 再将后n个元素翻转到左侧</span></span><br><span class="line">    d.rotate(n)</span><br><span class="line"></span><br><span class="line">d = deque(<span class="string">&quot;abcdefg&quot;</span>)</span><br><span class="line">delete_nth(d,n = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice依赖于rotate方法的纯Python实现，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slice</span>(<span class="params">d,m,n</span>):</span></span><br><span class="line">    <span class="comment"># 先将前面m个元素翻转到右侧</span></span><br><span class="line">    d.rotate(-m)</span><br><span class="line">    i = m</span><br><span class="line">    sliceList = []</span><br><span class="line">    <span class="comment"># 依次将[m,n]区间内的元素出栈</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        item = d.popleft()</span><br><span class="line">        sliceList.append(item)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 再将出栈的元素扩展到deque右侧</span></span><br><span class="line">    d.extend(sliceList)</span><br><span class="line">    <span class="comment"># 再将后面n个元素翻转到左侧</span></span><br><span class="line">    d.rotate(n)</span><br><span class="line">    <span class="keyword">return</span> sliceList</span><br><span class="line"></span><br><span class="line">d = deque(<span class="string">&quot;abcdefg&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> slice(d,<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Github项目与Gitee同步更新</title>
    <url>/2020/09/08/Github%E9%A1%B9%E7%9B%AE%E5%92%8CGitee%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用hexo作为个人博客，将个人博客部署到Github或者Gitee中，并开启Pages功能，这样便可以让别人看到自己的个人博客。将博客部署到Github后，每次提交增加新的页面，Github中Pages会自动更新，但是Gitee在每次提交项目后，需要手动更新Pages。同样国内访问Github的速度的确有些慢，Gitee访问速度快，但是每次更新均需要手动更新Pages，这个有点。。。。，本文介绍一种解决办法，用GitHub Actions把代码同步到Gitee</p>
<!--  more -->

<h3 id="具体操作方法"><a href="#具体操作方法" class="headerlink" title="具体操作方法"></a>具体操作方法</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [ <span class="string">psuh</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">        <span class="attr">steps:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">to</span> <span class="string">Gitee</span></span><br><span class="line">            <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span> <span class="comment"># 这个地方不需要修改</span></span><br><span class="line">            <span class="attr">env:</span></span><br><span class="line">                <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">                <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">with:</span></span><br><span class="line">                <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">                <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:XXGGG/xxggg.github.io.git&quot;</span></span><br><span class="line">                <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">                <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:XXGGG/XXGGG.git&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">            <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span> <span class="comment"># 这个地方不需要修改</span></span><br><span class="line">            <span class="attr">with:</span></span><br><span class="line">                <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">                <span class="attr">gitee-username:</span> <span class="string">XXGGG</span></span><br><span class="line">                <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">                <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">                <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">                <span class="attr">gitee-repo:</span> <span class="string">XXGGG/XXGGG</span></span><br></pre></td></tr></table></figure>

<p>这里面最重要的除了简单更换填写你的github跟gitee对应项目地址以外<br>最重要的的就是配置好你GitHub项目里的 <font color='HotPink'>settings<code>-&gt;</code>secrets</font><code> 里的</code><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font><code>和</code><font color='HotPink'>GITEE_PASSWORD</font></p>
<ul>
<li><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font>  是私钥</li>
<li><font color='HotPink'>GITEE_PASSWORD</font> 是你Gitee的账户密码</li>
</ul>
<p><font color='HotPink'>GITEE_RSA_PRIVATE_KEY</font>,<font color='HotPink'>GITEE_PASSWORD</font> 这两个关键字需要在Github项目的<font color='HotPink'>Setting-&gt;Secrets</font>中增加两个这样的关键字，并赋值。</p>
<h3 id="如何获得私钥公钥"><a href="#如何获得私钥公钥" class="headerlink" title="如何获得私钥公钥"></a>如何获得私钥公钥</h3><blockquote>
<p>参考文章<br><a href="https://blog.csdn.net/fenghuibian/article/details/73350890">https://blog.csdn.net/fenghuibian/article/details/73350890</a><br><a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p>
</blockquote>
<h3 id="第一步-生成SSH-Key"><a href="#第一步-生成SSH-Key" class="headerlink" title="第一步  生成SSH Key"></a>第一步  生成SSH Key</h3><p>打开GitBash （windows 下载git后自带）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxx@xxxx.com&quot;</span><br><span class="line">//(xxxx@xxxx.com 为你的邮箱)</span><br></pre></td></tr></table></figure>

<p>按照提示完成三次回车，即可生成 ssh key。<br>通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的公钥，找到id_res.pub这个文件.</p>
<h3 id="第二步-将公钥添加到Github和Gitee中"><a href="#第二步-将公钥添加到Github和Gitee中" class="headerlink" title="第二步 将公钥添加到Github和Gitee中"></a>第二步 将公钥添加到Github和Gitee中</h3><p>浏览器登上GitHub然后在<font color='HotPink'>settings<code>-&gt;</code>SSH and GPG keys</font>里添加上公钥（码云gitee同理）</p>
<h3 id="第三步测试是否配置成功"><a href="#第三步测试是否配置成功" class="headerlink" title="第三步测试是否配置成功"></a>第三步测试是否配置成功</h3><p>打开Gitbash。测试Github是否可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>测试Gitee</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>若返回 Hi XXX! You’ve successfully authenticated, but (Gitee.com/GitHub.com) does not provide shell access. 内容，则证明添加成功。</p>
<h3 id="第四步-配置私钥"><a href="#第四步-配置私钥" class="headerlink" title="第四步 配置私钥"></a>第四步 配置私钥</h3><p>在 ~/.ssh目录下有*<strong>id_rsa*** 和*</strong>id_rsa.pub*<strong>两个文件<br>**<em>id_rsa.pub</em></strong>是公钥<br>**<em>id_rsa**</em> 是私钥</p>
<p>查看私钥 然后把私钥添加到GitHub项目里的<font color='HotPink'><code>settings</code>-&gt;<code>secrets</code></font> 里的<font color='HotPink'><code>GITEE_RSA_PRIVATE_KEY</code></font></p>
<blockquote>
<p>注意：全部都要复制，开头和结尾注意勿遗漏</p>
</blockquote>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>提交项目到Github中，可以在Github项目 <font color='HotPink'><code>Actions</code></font>中查看执行结果。</p>
<blockquote>
<p>感谢 <a href="https://blog.csdn.net/qq_42460209/article/details/108041021?utm_source=app">https://blog.csdn.net/qq_42460209/article/details/108041021?utm_source=app</a></p>
</blockquote>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
